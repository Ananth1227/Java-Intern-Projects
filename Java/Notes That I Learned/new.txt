                                                                                                   JAVA Keywords

compile
----> javac --enable-preview --release 22 tic.java
to run 
----->java --enable-preview tic 


-------->

1.scanner[it is a class] and it provides:
[To use scanner we must import it]

["import java.util.Scanner;]

next(): Reads the next token as a String.
nextInt(): Reads the next token as an int.
nextDouble(): Reads the next token as a double.
nextLine(): Reads the entire line as a String

2.STRING concepts:

To convert char to string
Syntax: "new String(char[])"
When you have a character array (char[] pass), the new String(pass) constructor is used to create a String object from that character array. This is the standard way in Java to convert a char[] to a String


To trim the string

 -->Syntax"data_type "variable" =string.trim()"

def : Remove Leading and Trailing Spaces
Method: trim()
Keypoints:
Leading Whitespace: Whitespace at the beginning of the string.
Trailing Whitespace: Whitespace at the end of the string.
No Effect on Internal Whitespace: Whitespace characters within the string remain unaffected
example:
String str = "  Hello World  ";
String trimmedStr = str.trim();
 // "Hello World"

To remove every space 

--> Remove All Spaces

Method: replaceAll()
Example:
String str = "Hello World";
String noSpacesStr = str.replaceAll("\\s", "");  // "HelloWorld" 

To remove punctutation
    -->Using \\p{Punct}
                   This method uses the predefined character class \\p{Punct} to match any punctuation character

Syntax: String noPunctuationStr = noSpacesStr.replaceAll("\\p{Punct}", "");

To change the string into lower case
     -->Syntax: String 'variable' = 'given_String'.toLowerCase();

You can convert a String to a character array using the toCharArray() method:

syntax"char[] charArray = str.toCharArray();"

{The System.arraycopy() method in Java:
       is a powerful and efficient way to copy elements from one array to another. This method is part of the java.lang package, so it does not require any additional imports. It provides a fast way to copy array elements, which can be crucial for performance-sensitive applications.
Syntax:

"System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)"
Parameters
src: The source array.
srcPos: The starting position in the source array.
dest: The destination array.
destPos: The starting position in the destination array.
length: The number of array elements to be copied.


Copying Entire Array
To copy the entire contents of one array to another:

Example code:
int[] srcArray = {1, 2, 3, 4, 5};
int[] destArray = new int[srcArray.length];

System.arraycopy(srcArray, 0, destArray, 0, srcArray.length);

}

for-each loop(for 1 dimension)
Syntax:
for (type variable : collection) {
    // body of loop
}
 
type: The data type of the elements in the collection or array.
variable: The loop variable that holds each element during each iteration.
collection: The array or collection being iterated over.
in detail:

for-each loop(for 2 dimension)
Syntax:
for (char[] row : charMatrix) 
{
for (char ch : row) {
System.out.print(row);
}
}

IN detail:

"for (char[] row : charMatrix) "

char[]: This is the type part of the loop variable in the outer loop. It specifies that each row in the charMatrix is an array of characters (char[]).
row: The loop variable that takes on the value of each row in the charMatrix during each iteration. Each row is a one-dimensional array of characters.
charMatrix: This is the two-dimensional array being iterated over. Each element in charMatrix is a one-dimensional char[].

"for (char ch : row)"

char: This is the type part of the loop variable in the inner loop. It specifies that each ch in the row is a single character (char).
ch: The loop variable that takes on the value of each character in the current row during each iteration.
row: This is the one-dimensional array of characters being iterated over in the inner loop


3.
Math.random():
-->
This function returns a double value greater than or equal to 0.0 and less than 1.0 (i.e., [0.0, 1.0)).
 Multiplying by len:
Let's assume len is the length of the string org (e.g., 10).
If Math.random() generates a value like 0.5, then multiplying 0.5 by 10 (i.e., len) results in 5.0.
If Math.random() generates a value like 0.72, then multiplying 0.72 by 10 results in 7.2.

Casting to (int):

The result of Math.random() * len is a double, which needs to be converted to an integer to use it as an index.

Casting to (int) truncates the decimal part. So, 5.0 becomes 5, and 7.2 becomes 7.

4.
 Array concepts:
2D array :
  " matrix.length "
     ---> length of i(row) if 3 rows it returns 3
  This confirms that matrix.length gives you the number of rows, and matrix[i].length gives you the number of columns in the i-th row.
